using Discord;
using Discord.WebSocket;
using RedFox.Core.Services;
using System;
using System.Collections.Concurrent;
using System.Linq;
using System.Threading.Tasks;

namespace DiscordBot.Commands
{
    public class RpsCommand : ICommand
    {
        private readonly DiscordSocketClient _client;
        private readonly DuelService _duelService;
        private readonly ConcurrentDictionary<ulong, ulong> _duelRequests;

        public string CommandName => "rps";

        // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        public RpsCommand(DiscordSocketClient client, DuelService duelService)
        {
            _client = client;
            _duelService = duelService;
            _duelRequests = new ConcurrentDictionary<ulong, ulong>();

            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏
            _client.ReactionAdded += OnReactionAddedAsync;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã /rps
        public async Task ExecuteAsync(IMessageChannel channel, IUser user, string[] args)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å
                if (args.Length < 1)
                {
                    await channel.SendMessageAsync("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥—É—ç–ª–∏.");
                    return;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
                var mentionedUser = _duelService.ExtractUserFromMention(args[0]);
                if (mentionedUser == null)
                {
                    await channel.SendMessageAsync("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.");
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º —Å–µ–±—è
                if (mentionedUser.Id == user.Id)
                {
                    await channel.SendMessageAsync("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å.");
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
                var result = await _duelService.CreateDuelAsync(channel, user, mentionedUser);

                if (!result)
                {
                    await channel.SendMessageAsync($"<@{user.Id}>, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞.");
                }
                else
                {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏
                    var message = await channel.SendMessageAsync($"{mentionedUser.Mention}, {user.Mention} –≤—ã–∑–≤–∞–ª –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å! –ù–∞–∂–º–∏—Ç–µ üëç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è, –∏–ª–∏ üëé –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è.");

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.AddReactionAsync(new Emoji("üëç"));
                    await message.AddReactionAsync(new Emoji("üëé"));
                }
            }
            catch (Exception ex)
            {
                await channel.SendMessageAsync("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.");
                Console.WriteLine($"–û—à–∏–±–∫–∞ –≤ RpsCommand.ExecuteAsync: {ex.Message}");
            }
        }

        // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        private async Task OnReactionAddedAsync(Cacheable<IUserMessage, ulong> cache, Cacheable<IMessageChannel, ulong> channelCache, SocketReaction reaction)
        {
            try
            {
                var channel = await channelCache.GetOrDownloadAsync();
                var message = await cache.GetOrDownloadAsync();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if (message == null || channel == null) return;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∞–∫—Ü–∏—è –æ–¥–Ω–æ–π –∏–∑ –Ω—É–∂–Ω—ã—Ö
                if (reaction.Emote.Name != "üëç" && reaction.Emote.Name != "üëé") return;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏–ª —Ä–µ–∞–∫—Ü–∏—é (—Ç–æ–ª—å–∫–æ –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
                if (reaction.UserId == message.Author.Id)
                {
                    if (reaction.Emote.Name == "üëç")
                    {
                        // –ü—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏
                        await channel.SendMessageAsync($"–î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å –º–µ–∂–¥—É <@{message.Author.Id}> –∏ <@{reaction.UserId}>! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥—É.");
                    }
                    else if (reaction.Emote.Name == "üëé")
                    {
                        // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥—É—ç–ª–∏
                        await channel.SendMessageAsync($"<@{reaction.UserId}> –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –æ—Ç <@{message.Author.Id}>.");
                    }

                    // –£–¥–∞–ª—è–µ–º –¥—É—ç–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                    _duelRequests.TryRemove(message.Author.Id, out _);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏: {ex.Message}");
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
        public ApplicationCommandProperties RegisterSlashCommand()
        {
            return new SlashCommandBuilder()
                .WithName("rps")
                .WithDescription("–í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞")
                .AddOption("user", ApplicationCommandOptionType.User, "–ò–≥—Ä–æ–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞", isRequired: true)
                .Build();
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥—ã
        public async Task ExecuteSlashCommandAsync(SocketSlashCommand command)
        {
            var userOption = command.Data.Options.FirstOrDefault(opt => opt.Name == "user")?.Value as SocketUser;
            if (userOption == null)
            {
                await command.RespondAsync("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –¥—É—ç–ª–∏.");
                return;
            }

            var user = command.User;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–∞–º —Å–µ–±—è
            if (userOption.Id == user.Id)
            {
                await command.RespondAsync("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å.");
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –¥—É—ç–ª—å
            var result = await _duelService.CreateDuelAsync(command.Channel, user, userOption);

            if (!result)
            {
                await command.RespondAsync($"<@{user.Id}>, –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç–∞.");
            }
            else
            {
                await command.RespondAsync($"–í—ã –≤—ã–∑–≤–∞–ª–∏ <@{userOption.Id}> –Ω–∞ –¥—É—ç–ª—å! –û–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞.");
            }
        }

        // –†–µ–∞–ª–∏–∑—É–µ–º –º–µ—Ç–æ–¥ ExecuteComponentCommandAsync –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        public async Task ExecuteComponentCommandAsync(SocketMessageComponent component)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (component.User.IsBot)
                    return;

                // –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
                if (component.Data.CustomId == "accept_duel")
                {
                    await component.RespondAsync("–î—É—ç–ª—å –ø—Ä–∏–Ω—è—Ç–∞!");
                    // –¢—É—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
                }
                else if (component.Data.CustomId == "decline_duel")
                {
                    await component.RespondAsync("–î—É—ç–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {ex.Message}");
            }
        }
    }
}
